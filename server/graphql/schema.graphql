scalar Date

type User {
    id: ID!
    name: String
    situations:[Situation]
    edges:[Edge]
    moods: [Mood]
    thoughts: [Thought]
    customFeelings: [String]
}

type Mood {
    title: String!
    feelings: [String]!
    description: String!
    from: Date
    to: Date
}

type Thought {
    title: String!
    description: String!
    feelings: [String]!
    date: String!
}

type Place {
    name: String
}

type Situation {
    title: String!
    description: String!
    place: Place!
    from: Date
    to: Date
    moods:[Mood]
    edge: EdgeOfLifeImpact
}

type Edge {
    name:String
}

type EdgeOfLifeImpact {
    edge: String
    modifier: Int
}

# Query and mutations

type Query {
    "User by id"
    getUser( id: ID!): User
    "User custom feelings + standart feelings"
    getUserAvailableFeelings( id: ID!): [String]
}

input AddMoodInput {
    title: String!
    feelings: [String]!
    description: String!
    date: String
}
input AddThoughtInput {
    title: String!
    feelings: [String]!
    description: String!
    date: String!
}

input AddCustomFeeling {
    feeling: String
}

type Mutation {
    "Add a mood"
    addMood(_id:ID!, input: AddMoodInput!): Mood
    "Add a thought"
    addThought(_id:ID!, input: AddThoughtInput!): Thought
    "Add custom feeling to the user"
    addCustomFeeling(_id:ID!, input: AddCustomFeeling!): String
}